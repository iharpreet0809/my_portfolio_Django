"""
Django settings for portfolio_django project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# This is the root directory of the Django project
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# The secret key is used for cryptographic signing and should be kept secure

SECRET_KEY = os.environ.get('SECRET_KEY', 'fallback-secret')

# Add your server's IP and the Docker container's service name for the nginx proxy
# ALLOWED_HOSTS specifies which hostnames Django can serve
#Your Django settings need to be explicitly configured to trust requests coming from your server's IP address and through the Nginx proxy.
ALLOWED_HOSTS = [
    '127.0.0.1',
    #'65.1.200.98',
    'iharpreet.com',
    'www.iharpreet.com',
    'django-app', #for dockercontainer
]  # Get allowed hosts from env var

# Trust requests originating from your domain/IP on the port Nginx is using
# CSRF_TRUSTED_ORIGINS is required when using HTTPS or when behind a proxy
CSRF_TRUSTED_ORIGINS = [
    # 'http://65.1.110.216:8888',
    # If you plan to use HTTPS in the future, you can add this as well
    # 'https://65.1.110.216:8888',
    "https://iharpreet.com",
    "https://www.iharpreet.com",
]

# Since you are not using HTTPS yet, it's best to comment these out for now
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True


# SECURITY WARNING: don't run with debug true turned on in production!
# Debug mode shows detailed error pages and should be False in production
# DEBUG is set based on the 'DEBUG' environment variable from your .env file.
# If 'DEBUG' is set to 'True' (as a string) in your environment, DEBUG will be True.
# Otherwise, it defaults to False.
DEBUG = os.environ.get('DEBUG', 'False').lower() in ('true', '1', 'yes')

# Conditional database configuration based on DEBUG setting
if DEBUG:  # for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'my_portfolio',
            'USER': 'root',
            'PASSWORD': 'root',
            'HOST': 'localhost',
            'PORT': '3306',
        }
    }
else:  # for production
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('MYSQL_DB'),
            'USER': os.environ.get('MYSQL_USER'),
            'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
            'HOST': os.environ.get('MYSQL_HOST'),
            'PORT': '3306',
        }
    }





import os

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'level': 'INFO',
    },
}


# Application definition
# INSTALLED_APPS tells Django which applications are available in this project

INSTALLED_APPS = [
    # Django built-in apps
    "django.contrib.admin",  # Admin interface
    "django.contrib.auth",  # Authentication system
    "django.contrib.contenttypes",  # Content type framework
    "django.contrib.sessions",  # Session framework
    "django.contrib.messages",  # Messaging framework
    "django.contrib.staticfiles",  # Static file management
    
    # Custom apps
    'portfolio_app',  # Main portfolio application

]

# MIDDLEWARE is a list of middleware classes that are executed on every request
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",  # Security middleware
    "django.contrib.sessions.middleware.SessionMiddleware",  # Session handling
    "django.middleware.common.CommonMiddleware",  # Common middleware
    "django.middleware.csrf.CsrfViewMiddleware",  # CSRF protection
    "django.contrib.auth.middleware.AuthenticationMiddleware",  # Authentication
    "django.contrib.messages.middleware.MessageMiddleware",  # Message handling
    "django.middleware.clickjacking.XFrameOptionsMiddleware",  # Clickjacking protection
]

# ROOT_URLCONF points to the main URL configuration module
ROOT_URLCONF = "portfolio_django.urls"

# TEMPLATES configuration for template rendering
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'portfolio_app', 'templates')],  # Template directory
        "APP_DIRS": True,  # Look for templates in app directories
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",  # Debug context
                "django.template.context_processors.request",  # Request context
                "django.contrib.auth.context_processors.auth",  # Auth context
                "django.contrib.messages.context_processors.messages",  # Messages context
            ],
        },
    },
]

# WSGI_APPLICATION points to the WSGI application object
WSGI_APPLICATION = "portfolio_django.wsgi.application"




# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS defines the password validation rules
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"  # Language code for the site

TIME_ZONE = "UTC"  # Time zone for the site

USE_I18N = True  # Enable internationalization

USE_TZ = True  # Enable timezone support


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
# URL to serve static files
STATIC_URL = '/static/'

# Where collectstatic puts everything (inside container)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Where to look for extra static files (your top-level static/ folder)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]



# Media files (user-uploaded content)
MEDIA_URL = '/media/'  # URL prefix for media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')  # Directory for uploaded files



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"  # Use BigAutoField for primary keys


#EMAIL SETTINGS
# Configuration for sending emails (used by contact form)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # SMTP backend
EMAIL_HOST = 'smtp.gmail.com'  # Gmail SMTP server
EMAIL_PORT = 587  # SMTP port for TLS
EMAIL_USE_TLS = True  # Use TLS encryption
EMAIL_HOST_USER = 'talkwithharpreet@gmail.com'  # Gmail account
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  # Default sender email
EMAIL_HOST_PASSWORD = 'ldjqbszfodflytmf'  # Use Gmail App Password (not your Gmail password)

# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')  # Use Gmail App Password (not your Gmail password)


# CELERY CONFIGURATION
# Celery settings for async task processing
REDIS_URL = os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0')

# Celery Configuration Options
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Celery task routing
CELERY_TASK_ROUTES = {
    'portfolio_app.tasks.send_contact_email_async': {'queue': 'emails'},
}

# Celery worker configuration
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True