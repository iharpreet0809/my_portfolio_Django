version: "3.8"  # Docker Compose file format version

services:

  # MySQL Database Service

  mysql:

    image: mysql/mysql-server:8.0  # Official MySQL 8.0 server image

    container_name: mysql  # Name for the container

    environment:

      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  # Root password from environment variable

      MYSQL_DATABASE: ${MYSQL_DATABASE}  # Database name from environment variable

      MYSQL_USER: ${MYSQL_USER}  # Database user from environment variable

      MYSQL_PASSWORD: ${MYSQL_PASSWORD}  # Database password from environment variable

    ports:

      - "3306:3306"  # Expose MySQL port to host machine

    volumes:

      - mysql_data:/var/lib/mysql  # Persistent storage for database data

      # - ./staticfiles:/app/staticfiles  # Commented out - static files handled by Django

      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # SQL script to run on first startup

    networks:

      - twotier  # Connect to custom network

    restart: always  # Restart container if it stops

    healthcheck:

      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD}"]

      interval: 10s  # Check every 10 seconds

      timeout: 5s  # Timeout after 5 seconds

      retries: 5  # Retry 5 times before marking unhealthy

      start_period: 60s  # Wait 60 seconds before starting health checks

  # Django Application Service

  django:

    build:

      context: .  # Build context (current directory)

      dockerfile: Dockerfile  # Use the Dockerfile in current directory

    image: portfolio_django:latest  # Name for the built image

    #image: harpreetdevops/portfolio

    container_name: django-app  # Name for the container

    ports:

      - "8000:8000"  # Expose Django development server port

    environment:

      SECRET_KEY: ${SECRET_KEY}  # Django secret key from environment variable

      DEBUG: ${DEBUG}  # Debug mode from environment variable

      MYSQL_HOST: mysql  # Database host (service name)

      MYSQL_USER: ${MYSQL_USER}  # Database user from environment variable

      MYSQL_PASSWORD: ${MYSQL_PASSWORD}  # Database password from environment variable

      MYSQL_DB: ${MYSQL_DATABASE}  # Database name from environment variable

      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}  # Django settings module

    depends_on:

      mysql:

        condition: service_healthy  # Wait for MySQL to be healthy before starting

    volumes:

    - ./staticfiles:/app/staticfiles  # Mount static files directory for Nginx

    - ./logs:/app/logs #for storing the django logs

    networks:

      - twotier  # Connect to custom network

    restart: unless-stopped  # Restart unless manually stopped

    healthcheck:

      test: ["CMD-SHELL", "curl -f http://localhost:8000 || exit 1"]  # Check if Django is responding

      interval: 10s  # Check every 10 seconds

      timeout: 5s  # Timeout after 5 seconds

      retries: 5  # Retry 5 times before marking unhealthy

      start_period: 30s  # Wait 30 seconds before starting health checks

  # Nginx Web Server Service

  nginx:

    image: nginx:latest  # Official Nginx image

    container_name: nginx  # Name for the container

    ports:

      - "80:80"  # Expose Nginx port 80 as 8888 on host

      - "443:443" 

    depends_on:

      - django  # Wait for Django service to start

    volumes:

      - ./nginx:/etc/nginx/conf.d

      - ./staticfiles:/app/staticfiles  # NGINX SERVES from this directory

      - ./certbot/www:/var/www/certbot

      - ./certbot/conf:/etc/letsencrypt

    networks:

      - twotier  # Connect to custom network

    restart: always  # Restart container if it stops (ensures Nginx auto-starts after reboot)

   

  certbot:

    image: certbot/certbot

    container_name: certbot

    volumes:

      - ./certbot/www:/var/www/certbot

      - ./certbot/conf:/etc/letsencrypt

    # entrypoint: >

    #  sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot

    #  --email talkwithharpreet@gmail.com --agree-tos --no-eff-email

    #  --non-interactive --keep-until-expiring

    #  -d iharpreet.com -d www.iharpreet.com"

    entrypoint: >

      sh -c "trap exit TERM; while :; do sleep 6h & wait $${!}; certbot renew; done"

    networks:

      - twotier

# Custom network for inter-service communication

networks:

  twotier:  # Network name for internal communication

# Named volumes for persistent data storage

volumes:

  mysql_data:  # Persistent volume for MySQL database data